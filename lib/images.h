
#ifndef __IMAGES__
#define __IMAGES__

#include <avr/pgmspace.h>
#include "prelude.h"

// Typecast const uint8_t[] into ImageBytes, which is a costless convertion
#define GET_IMAGE(img_name) ((ImageBytes)(__raw_ ## img_name ## _p))

// A raw image data struct
typedef struct
{
	ImageBytes data;
	ImageLength len;
	Vector2 size;
} RawImage;

// AUTO-GENERATED IMAGE CONVERTED FROM: frogge.bmp
extern RawImage image_frogge;
// AUTO GENERATED IMAGE, PUT ME IN images.h
PROGMEM const char __raw_frogge_p[134] = {
	0xff, 0xff, 0x4f, 0xe0, 0x03, 0xe1, 0x00, 0x00, 0xf8, 0x0d, 0x23, 0xe0, 0x00, 0x00, 0x00, 0x00,
	0xb8, 0x19, 0xf8, 0x11, 0x22, 0xa9, 0xc8, 0x11, 0x12, 0xb2, 0x11, 0xb8, 0x11, 0xd2, 0x11, 0xb0, 0x12, 0x20, 0x02, 0x22, 0x20, 0x02, 0x21, 0xb0, 0x12, 0x20, 0x32, 0x22, 0x23, 0x02, 0x21, 0xb0, 0x12, 0xda, 0x11, 0x08, 0x11, 0xaa, 0x33, 0xb2, 0x10, 0x00, 0x01, 0xf2, 0x10, 0x00, 0x01, 0x22, 0x23, 0x22, 0x33, 0x22, 0x32, 0x22, 0x10, 0x00, 0x01, 0x2a, 0x33, 0x44, 0x33, 0x22, 0x21, 0x10, 0x00, 0x01, 0x12, 0x2a, 0x44, 0x2a, 0x51, 0xb0, 0x12, 0x2a, 0x44, 0x2a, 0x10, 0xb0, 0x11, 0xc2, 0xa9, 0xa8, 0xd9, 0x22, 0x21, 0x10, 0x01, 0x19, 0x00, 0xb1, 0xaa, 0x11, 0x12, 0x22, 0x11, 0xb0, 0x11, 0x2a, 0x11, 0x2a, 0x11, 0xb8, 0x12, 0x22, 0x21, 0x11, 0x22, 0x21, 0xc0, 0x11, 0x21, 0x11, 0x01, 0x19, 0xc8, 0x11, 0x10, 0x08
};

// AUTO-GENERATED IMAGE CONVERTED FROM: road_grass.png
extern RawImage image_road_grass;
// AUTO GENERATED IMAGE, PUT ME IN images.h
PROGMEM const char __raw_road_grass_p[63] = {
	0x04, 0xe1, 0x03, 0xe1, 0x01, 0x60, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xf8, 0xf8, 0xf8, 0xd0, 0x11, 0x10, 0x01, 0x10, 0x00, 0x01, 0xf9, 0xf9, 0x12, 0x22, 0xc1, 0xaa, 0x11, 0xba, 0x19, 0x22, 0x23, 0x32, 0xba, 0x33, 0xb2, 0xbb, 0x22, 0xbb, 0x22, 0x23, 0xfb, 0xfb, 0xfb, 0xfb, 0xfb, 0xfb, 0xfb, 0xfb, 0xfb, 0xfb, 0xfb, 0xfb, 0xfb, 0xfb, 0xbb, 0xd4, 0xab
};

// AUTO-GENERATED IMAGE CONVERTED FROM: road_middle.png
extern RawImage image_road_middle;
// AUTO GENERATED IMAGE, PUT ME IN images.h
PROGMEM const char __raw_road_middle_p[45] = {
	0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xa8, 0xd1, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xd0, 0xd1, 0xa8
};

// AUTO-GENERATED IMAGE CONVERTED FROM: sidewalk_road.png
extern RawImage image_sidewalk_road;
// AUTO GENERATED IMAGE, PUT ME IN images.h
PROGMEM const char __raw_sidewalk_road_p[72] = {
	0x00, 0x00, 0xff, 0xff, 0x01, 0x60, 0x75, 0x0e, 0xb5, 0xd6, 0x7b, 0xef, 0x4b, 0xea, 0x00, 0x00,
	0xa8, 0xd1, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0x00, 0x22, 0xc0, 0x2a, 0xa8, 0xaa, 0x00, 0x22, 0x34, 0x43, 0x33, 0x34, 0xac, 0x33, 0x4c, 0x35, 0x55, 0x56, 0x65, 0x55, 0x45, 0x56, 0x65, 0x5d, 0x45, 0xc5, 0x45, 0xc5, 0x45, 0xc5, 0x45, 0xc5, 0x45, 0xc5, 0x45, 0xc5, 0x48
};


// AUTO-GENERATED IMAGE CONVERTED FROM: grass.png
extern RawImage image_grass;
// AUTO GENERATED IMAGE, PUT ME IN images.h
PROGMEM const char __raw_grass_p[103] = {
	0x04, 0xe1, 0x04, 0x61, 0x03, 0xe1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xa8, 0xa9, 0xf0, 0x11, 0x12, 0x21, 0x11, 0xd0, 0x11, 0x12, 0xaa, 0x11, 0x10, 0xb8, 0x11, 0xc2, 0x11, 0xb8, 0x11, 0x12, 0xc2, 0x10, 0xb0, 0x11, 0x12, 0xc2, 0x10, 0xb8, 0x11, 0xba, 0x11, 0x10, 0xb8, 0x11, 0x12, 0x2a, 0x11, 0xd8, 0xc1, 0xe8, 0xb1, 0xb8, 0xa9, 0xf0, 0x11, 0x22, 0x21, 0x10, 0xd8, 0x11, 0xaa, 0x10, 0xd0, 0x11, 0xb2, 0x11, 0xc0, 0x11, 0x12, 0xb2, 0x11, 0xc0, 0x11, 0x12, 0xb2, 0x11, 0x10, 0xb8, 0x11, 0x12, 0xaa, 0x11, 0x10, 0xc0, 0x11, 0xaa, 0x11, 0x10, 0xd0, 0x19, 0x21, 0x11, 0xf0, 0x11, 0x10, 0xf8, 0x08
};

// AUTO-GENERATED IMAGE CONVERTED FROM: grass_lake.png
extern RawImage image_grass_lake;
// AUTO GENERATED IMAGE, PUT ME IN images.h
PROGMEM const char __raw_grass_lake_p[61] = {
	0x04, 0x9f, 0x03, 0xfa, 0x04, 0x61, 0x04, 0xe1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0x08, 0x11, 0x10, 0xf0, 0xb9, 0xb0, 0x19, 0x00, 0x11, 0x22, 0x32, 0xb1, 0x00, 0x22, 0xa9, 0x23, 0xab, 0x22, 0x19, 0x22, 0x23, 0xeb, 0x22, 0x23, 0xfb, 0x3b
};

// AUTO-GENERATED IMAGE CONVERTED FROM: lake.png
extern RawImage image_lake;
// AUTO GENERATED IMAGE, PUT ME IN images.h
PROGMEM const char __raw_lake_p[43] = {
	0x04, 0x9f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xd0
};

// AUTO-GENERATED IMAGE CONVERTED FROM: lake_sand.png
extern RawImage image_lake_sand;
// AUTO GENERATED IMAGE, PUT ME IN images.h
PROGMEM const char __raw_lake_sand_p[58] = {
	0xfe, 0x4d, 0x03, 0xfa, 0x04, 0x9f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xf8, 0xf8, 0xe0, 0xa9, 0xf0, 0x11, 0x12, 0x21, 0x10, 0x00, 0x01, 0x19, 0x00, 0x01, 0x12, 0x2a, 0xb9, 0x2a, 0x11, 0xca, 0x11, 0x12, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0x22
};

// AUTO-GENERATED IMAGE CONVERTED FROM: sand_grass.png
extern RawImage image_sand_grass;
// AUTO GENERATED IMAGE, PUT ME IN images.h
PROGMEM const char __raw_sand_grass_p[77] = {
	0x04, 0xe1, 0x04, 0x61, 0x03, 0xe1, 0xfe, 0x4d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x08, 0x11, 0xf8, 0x01, 0x19, 0xf0, 0x11, 0x22, 0x21, 0xb0, 0x19, 0x08, 0x12, 0x22, 0x21, 0x08, 0x11, 0x12, 0x22, 0x10, 0x00, 0x12, 0x22, 0x11, 0x08, 0x12, 0x2a, 0x10, 0x00, 0x01, 0x11, 0x10, 0x08, 0x11, 0x2a, 0x10, 0xf8, 0x11, 0x10, 0xf8, 0xf8, 0xf0, 0xab, 0xb8, 0x3b, 0x00, 0xcb, 0x08, 0xfb, 0xfb, 0xfb, 0xfb, 0xfb, 0xfb, 0xfb, 0xfb, 0xfb, 0xfb, 0xfb, 0xfb, 0xbb
};


PROGMEM const uint8_t image[] = {
	// First 8 bytes are colors
	0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,
	// Colormap
	// The colormap uses the following format;

	// COLOR BYTE
	// [ RESV | COL1 | COL2 | COL3 | COPY | COL1 | COL2 | COL3 ]
	//
	// The first bit is always 0, the following 3 bits are
	// are the palette index. Then the following bit indicates if
	// the 4 pixels (the two defined in this byte, and the two
	// pixels after) match a xoxo pattern. Otherwise this is set
	// to zero. After this bit, another 3 bits are used for
	// the next pixel color.

	// RANGE BYTE
	// [ RESV | RAN1 | RAN2 | RAN3 | RAN4 | COL1 | COL2 | COL3 ]
	//
	// The first bit is always 1, the 4 bits after are used to
	// indicate how many following pixels should use the same color.
	// The remaining 3 bits are the color palette index to repeat.
};

#endif
