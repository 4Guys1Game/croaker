
#ifndef __IMAGES__
#define __IMAGES__

#include <avr/pgmspace.h>

PROGMEM const char image[] = {
	// First 8 bytes are colors
	0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,
	// Colormap
	// The colormap uses the following format;

	// COLOR BYTE
	// [ RESV | COL1 | COL2 | COL3 | COPY | COL1 | COL2 | COL3 ]
	// 
	// The first bit is always 0, the following 3 bits are
	// are the palette index. Then the following bit indicates if
	// the 4 pixels (the two defined in this byte, and the two
	// pixels after) match a xoxo pattern. Otherwise this is set
	// to zero. After this bit, another 3 bits are used for
	// the next pixel color.

	// RANGE BYTE
	// [ RESV | RAN1 | RAN2 | RAN3 | RAN4 | COL1 | COL2 | COL3 ]
	// 
	// The first bit is always 1, the 4 bits after are used to
	// indicate how many following pixels should use the same color.
	// The remaining 3 bits are the color palette index to repeat.
};

// AUTO-GENERATED IMAGE CONVERTED FROM: frogge.bmp
PROGMEM const uint16_t frogge[400] = {
        65535, 65535, 65535, 65535, 65535, 65535, 65535, 20448, 20448, 20448, 20448, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
        65535, 65535, 65535, 65535, 65535, 65535, 20448, 20448, 993, 993, 20448, 20448, 20448, 20448, 20448, 65535, 65535, 65535, 65535, 65535,
        65535, 65535, 65535, 65535, 20448, 20448, 20448, 993, 993, 993, 993, 993, 993, 993, 20448, 20448, 65535, 65535, 65535, 65535,
        65535, 65535, 65535, 20448, 20448, 993, 993, 993, 993, 993, 993, 993, 993, 993, 993, 20448, 20448, 65535, 65535, 65535,
        65535, 65535, 65535, 20448, 993, 993, 65535, 65535, 993, 993, 993, 993, 65535, 65535, 993, 993, 20448, 65535, 65535, 65535,
        65535, 65535, 65535, 20448, 993, 993, 65535, 0, 993, 993, 993, 993, 0, 65535, 993, 993, 20448, 65535, 65535, 65535,
        65535, 65535, 65535, 20448, 993, 993, 993, 993, 993, 993, 993, 993, 993, 993, 993, 993, 20448, 20448, 65535, 65535,
        65535, 65535, 20448, 20448, 993, 993, 993, 993, 993, 0, 0, 993, 993, 993, 993, 993, 993, 20448, 65535, 65535,
        65535, 65535, 20448, 993, 993, 993, 993, 993, 993, 993, 993, 993, 993, 993, 993, 993, 993, 20448, 65535, 65535,
        65535, 65535, 20448, 993, 993, 993, 0, 993, 993, 0, 0, 993, 993, 0, 993, 993, 993, 20448, 65535, 65535,
        65535, 65535, 20448, 993, 993, 993, 993, 0, 0, 63501, 63501, 0, 0, 993, 993, 993, 20448, 20448, 65535, 65535,
        65535, 65535, 20448, 20448, 993, 993, 993, 993, 993, 63501, 63501, 993, 993, 993, 993, 9184, 20448, 65535, 65535, 65535,
        65535, 65535, 65535, 20448, 993, 993, 993, 993, 993, 63501, 63501, 993, 993, 993, 993, 20448, 65535, 65535, 65535, 65535,
        65535, 65535, 65535, 20448, 20448, 993, 993, 993, 993, 993, 993, 993, 993, 20448, 20448, 20448, 20448, 20448, 65535, 65535,
        65535, 65535, 65535, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 993, 993, 993, 20448, 20448, 65535,
        65535, 20448, 20448, 20448, 20448, 20448, 65535, 65535, 20448, 20448, 20448, 20448, 20448, 20448, 993, 993, 993, 993, 993, 20448,
        20448, 20448, 993, 993, 993, 20448, 20448, 65535, 65535, 65535, 65535, 65535, 65535, 20448, 20448, 993, 993, 993, 993, 20448,
        20448, 993, 993, 993, 993, 20448, 20448, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 20448, 993, 993, 993, 993, 20448,
        20448, 20448, 993, 993, 993, 20448, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 20448, 20448, 993, 20448, 20448, 20448,
        65535, 20448, 20448, 20448, 20448, 20448, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 20448, 20448, 20448, 65535, 65535,
};

// AUTO-GENERATED IMAGE CONVERTED FROM: tile.bmp
PROGMEM const uint16_t tile[400] = {
        993, 3169, 7520, 7520, 7520, 7520, 7520, 7520, 7520, 7520, 7520, 7520, 7520, 7520, 7520, 7520, 7520, 7520, 3169, 993,
        3169, 9664, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 9664, 3169,
        7520, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 7520,
        7520, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 7520,
        7520, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 7520,
        7520, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 7520,
        7520, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 7520,
        7520, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 7520,
        7520, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 7520,
        7520, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 7520,
        7520, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 7520,
        7520, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 7520,
        7520, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 7520,
        7520, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 7520,
        7520, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 7520,
        7520, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 7520,
        7520, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 7520,
        7520, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 7520,
        3169, 9664, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 20448, 9664, 3169,
        993, 3169, 7520, 7520, 7520, 7520, 7520, 7520, 7520, 7520, 7520, 7520, 7520, 7520, 7520, 7520, 7520, 7520, 3169, 993,
};

#endif
